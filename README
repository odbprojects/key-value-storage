
USE CASES
1. Unit Tests
  Purpose: Test the core components (Message, Table, ValueStack) and serialization functions (encode and decode).
  
  Command:
    make unit_tests
    ./unit_tests
    Outcome: Validates that your implementation is ready for client and server development.


2. Client Programs  
get_value Client
  Purpose: Retrieves a value associated with a specific key.
  Usage:
    ./get_value hostname port username table ke
  Example:
    ./get_value localhost 5000 alice fruit apples
    Outputs: 42
  
set_value Client
  Purpose: Sets the value of a key in a table.
  Usage:
    ./set_value hostname port username table key value
  Example:
    ./set_value localhost 5000 alice fruit apples 67
    No output if successful.
  
incr_value Client
  Purpose: Increments the integer value of a key by 1, optionally within a transaction.
  Usage:
    ./incr_value [-t] hostname port username table key
  Example:
    ./incr_value localhost 5000 alice fruit apples
    ./incr_value -t localhost 5000 alice fruit apples
    No output if successful.

3. Server
  Purpose: Listens for client requests and handles table operations (e.g., GET, SET, increment, etc.).
  Usage:
    ./server port
  Example:
    ./server 5000
  Server Features

  Autocommit Mode: Each operation is atomic.
  Transaction Mode: Groups operations (e.g., GET → PUSH → ADD → SET) for atomic execution.
  Concurrency Control:
  Uses pthread_mutex_lock and pthread_mutex_trylock for synchronization.
  Transactions roll back if locks fail or errors occur.

4. Error Handling
  Clients:
    Print error messages to stderr if communication or operations fail.
  Server:
    Sends ERROR responses for invalid messages or failed operations.
    Handles exceptions (InvalidMessage, CommException, OperationException, FailedTransaction) with proper cleanup.

6. Synchronization Strategy
  Key Mechanisms:
    Mutexes for table access.
    Transactions use pthread_mutex_trylock to avoid deadlocks.

  Error Recovery:
    Transactions that fail release all locks and roll back changes.
